Substring Search

We have two strings: Pattern and Text.
Pattern is usually small, text is usually large.

Goal: Find pattern of length M in text of length N

Brute-force substring search
* one index to keep position within text
* one index to keep position of pattern
* one variable to keep beginning of pattern

1. compare pattern.charAt[i] with text.charAt[x]
2. if they are not equal, reset i to 0 and increment x by 1
3. if they are equal, increment both i and x by 1.
3a. set pattern tracking index to first char match.
4. if we reach end of pattern, we have found the substring and return the pattern tracking index
5. if we reach end of text, we have no found the substring and return -1.

Problem
1. Brute force needs to backup for every mismatch.

Knuth-Morris-Pratt Algorithm

Deterministic finite state
* Finite number of stats (including start and half)
* exactly one transition for each char in alphabet.
* accept if sequence of transitions leads to a halt state.

Useful if we have small finite number of characters.

public int search(String text)
    int i, j, N = txt.length()
    for (i = 0; j = 0; i < N && j < M; i++)
        j = dfa[txt.charAt[i]][j]    // Need to precompute dfa
    if j == M return i-M;
    else return N

Looks at each character in text at most 1.
How to build DFA efficiently?

Since the text pointer never decrements, we can use this for input streams.

How to build DFA from pattern?
Match transition. If in state j and next char c ==pat.charAt[j], go to j+1

Mismatch transition. If in state j and next char c != pat.charAt[j], then the last j-1 charcters of inputs are pat[1...j-1], followed by c.

public KMP(String pat)
    this.pat = pat
    M = pat.length();
    dfa = new int[R][M];
    dfa[pat.charAt(0)][0] = 1;
    for (int x = 0, j = 1; j < M; j++)
        for int c = 0; c < R; c++
            dfa[c][j] = dfa[c][x]
        dfa[pat.charAt[j][j] = j+1;
        x = dfa[pat.charAt[j]][x];

Analysis: Linear time algorithm.
Requires R by M extra space.

Boyer-Moore: mismatch character heuristic
Intuition
* scan characters in pattern from right to left
* Can skip as many as M text chars when finding one not in pattern.

Q. How much to skip?
A. Precompute index of rightmost occurrence of character c in pattern. -1 if character not in pattern.

public int search(String text)
    int N = txt.length;
    int M = pat.length;
    int skip;

    for (int i = 0; i <= N-M; i+= skip)
        skip = 0;
        for (int j = M-1; j>= 0; j--)
            if (pat.charAt(j) != txt.charAt(i+j))
                skip = Math.max(1, j - right[txt.charAt(i+j)])
                break;
        if skip == 0 return i
    return N

Analysis: takes about ~ N / M character compares which is sublinear. Worst case can be as bad as ~ M * N.
Can improve worst case to ~3 N by adding a KMP-like rule to guard against repetitive patterns.

Rabin-Karp
Basic Idea = modular hashing
* Compute a hash of pattern characters 0 to M - 1
* For each i, compute hash of text characters i to M + i - 1
* if pattern hash = text substring has, check for a match.

Modular has function. Using the notion t_i for txt.charAt(i), we wish to compute:

// no limitation on how big the pattern is.
private long hash(String key, int M)
    long h = 0
    for (int j = 0; j < M; j++)
        h = (R * h + key.charAt(j))) % Q
    return h

x_i+1 = x_i - t_i * R^M-1 * R + t_i+m

