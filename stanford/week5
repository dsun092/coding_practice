Balanced Search Trees

enum Color {
    RED;
    BLACK;
}

public class Node {
    Key key
    Value val
    int size
    Node left, right
    Color color;

    public Node(Key key, Value, value)
        key = key
        value = value
        left = right = null
        size = 1
        color = BLACK;
}


public class BST
    private Node root

    public int size()
        return size(root)

    private int size(Node n)
        if n == null return 0
        return x.count

    public void put(Key key, Value val) {
        root = put(root, key, val)
    }

    private isRed(Node x)
        if x == null return false
        return x.color == RED

    private rotateLeft(Node x)
        Node r = x.right
        x.right = r.left
        r.left  = x
        r.color = x.color
        x.color = RED
        return r

    private rotateRight(Node x)
        Node l = x.left
        x.left = l.right
        l.right = x
        l.color = x.color
        x.color = RED
        return l

    private colorFlip(Node x)
        if isRed(x.left) && isRed(x.right)
            x.left.color = BLACK
            x.right.color = BLACK
            x.color = RED

    private Node put(Node x, Key key, Key val)
        if x == null return new Node(key, val, 1, RED)
        if key > x.val
            x.right = put(x.right, key, val)
        else if key < x.val
            x.left = put(x.left, key, val)
        else
            x.val = key

        if (isRed(x.right) && isRed(x.right)) x = rotateLeft(x)
        if (isRed(x.left) && isRed(x.left.left)) x = rotateRight(x)
        if (isRed(x.left) && isRed(x.right)) flipColors(x)

        x.size = 1 + size(x.left) + size(x.right)
        return x

    public Value get(Key key)
        val currentNode = root;
        while (currentNode != null)
            if (key > currentNode.key)
                currentNode = currentNode.right
            else if (key < currentNode.key)
                currentNode = currentNode.left
            else
                return currentNode.val
        return null

    public Node floor(Key key)
        floor(root, key)

    private Node floor(Node n, Key key)
        if n == null return null
        if n.key == key
            return n
        if key < n.key
            return floor(n.left, key)
        else
            potentialRight = floor(n.right, key)
            if potentialRight == null
                return n
            else
                return potentialRight

    public int rank(Key k)
        rank(root, k)

    private int rank(Node n, Key k)
        if k == n.key
            return size(n)
        else if k < n.key
            return rank(n.left, k)
        else
            return 1 + size(n.left) + rank(n.right, k)

    public Node min(Node n)
        val temp = n
        while (temp.left != null)
            temp = temp.left
        return temp

    public Node deleteMin(Node n)
        if n.left == null
            return x.right
        else
            x.left = deleteMin(n.left)
            x.count = 1 + size(x.left) + size(x.right)
            return x

    public Node delete(Key k)
        delete(root, k)

    private Node delete(Node n, Key k)
        if n == null return null
        if (k == n.key)
            if n.left == null
                x = n.right
                return x
            else if n.right == null
                x = n.left
                x.color = n.color
                return x
            else
                Node replacement = min(n.right)
                replacement.right = deleteMin(n.right)
                replacement.left = n.left
                replacement.color = n.color
                n = replacement
        else if (k < n.key)
            n.left = delete(n.left, k)
        else
            n.right = delete(n.right, k)
        if (n.left == null && isRed(n.right))
            n = rotateLeft(n)

        n.count = size(n.left) + size(n.right) + 1
        return n

    public void remove(Key key)

    public Iterable<Key> iterator()
